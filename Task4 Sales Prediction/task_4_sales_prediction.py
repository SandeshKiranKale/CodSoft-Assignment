# -*- coding: utf-8 -*-
"""Task 4 Sales Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16SJNiuDLOz_BA5X3OswcKW5KhbHMfPZl
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error ,r2_score
from sklearn.linear_model import LinearRegression

ds = pd.read_csv('/content/advertising.csv')

ds

ds.shape

ds.describe()

#Checking for null values if any
ds.isnull().sum()*100/ds.shape[0]

"""##Visualization"""

fig, axs = plt.subplots(3, figsize=(8,6))

plt1 = sns.boxplot(x=ds['TV'],ax=axs[0])
plt2 = sns.boxplot(x=ds['Newspaper'],ax=axs[1])
plt3 = sns.boxplot(x=ds['Radio'],ax=axs[2])

axs[0].set_xlabel('TV')
axs[1].set_xlabel('Newspaper')
axs[2].set_xlabel('Radio')

plt.tight_layout()
plt.show

sns.boxplot(ds['Sales'])
plt.show()

sns.pairplot(ds, x_vars=['TV', 'Newspaper', 'Radio'], y_vars='Sales',height=4,aspect = 1, kind='scatter')
plt.show()

plt.scatter(ds['TV'], ds['Sales'], label='Data points')

intercept = 6.948
slope = 0.054
plt.plot(ds['TV'], intercept + slope * ds['TV'], 'r', label = 'Linear Regression Line')

plt.xlabel('TV Advertising Spending')
plt.ylabel('Sales')
plt.legend()
plt.show()

plt.scatter(ds['Radio'],ds['Sales'], label='Data points')

intercept = 6.948
slope = 0.054
plt.plot(ds['Radio'], intercept + slope * ds['Radio'], 'r',label = 'Linear Regression Line')
plt.xlabel('Radio Advertising Spending')
plt.ylabel('Sales')
plt.legend()

plt.show()

plt.scatter(ds['Newspaper'], ds['Sales'], label='Data points')

intercept = 6.948
slope = 0.054
plt.plot(ds['Newspaper'], intercept + slope * ds['Newspaper'], 'r', label = 'Linear Regression Line')

plt.xlabel('Newspaper Advertising Spending')
plt.ylabel('Sales')
plt.legend()
plt.show()

"""Thus by checking all 3 parameters of Linear Regression line we se that 'TV' has many datapoints in close connection with the regression line.therefore we will consider 'TV' as our parameter for further analysis."""

correlation_matrix = ds[['TV','Newspaper','Radio','Sales']].corr()
print(correlation_matrix)

sns.heatmap(ds.corr(), cmap="YlGnBu", annot = True)
plt.show()

X = ds['TV']
y = ds['Sales']

X.info()

y.info()

X.sample()

y.sample()

X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, test_size=0.3, random_state = 100)

X_train.head()

X_test.head()

y_train.head()

y_test.head()

ds = np.array(ds).reshape(1, -1)
X_train = X_train.values.reshape(-1, 1)
X_test = X_test.values.reshape(-1, 1)
y_train = y_train.values.reshape(-1, 1)
y_test = y_test.values.reshape(-1, 1)

"""##Random Forest Regression"""

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

print(X_test.shape)

y_pred = model.predict(X_test)

y_pred

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error", mse)
print("R-squared:", r2)

new_campaign = np.array([180.8, 10.8, 58.4   ]).reshape(-1, 1)
predicted_sales = model.predict(new_campaign)
print("Predicted Sales for the new Campaign:", predicted_sales[0])

new_campaign = np.array([1000, 1, 580.4	]).reshape(-1, 1)
predicted_sales = model.predict(new_campaign)
print("Predicted Sales for the new campaign:", predicted_sales[0])

"""##Linear REgression"""

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
y_pred

mse = mean_squared_error(y_test,y_pred)
r2 = r2_score(y_test, y_pred)
print("Mean Squared Error:", mse)
print("R-squared:", r2)

new_campaign = np.array([44.5, 39.3, 45.1    ]).reshape(-1,1)
predicted_sales = model.predict(new_campaign)
print("Predicted Sales for the new Campaign", predicted_sales[0])

